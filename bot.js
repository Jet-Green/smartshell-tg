import 'dotenv/config';
import express from 'express';
import TelegramBot from 'node-telegram-bot-api';
import axios from 'axios';
import connectDB from './db.js';
import User from './models/user.model.js';

const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });
const app = express();

const SMARTSHELL_API_URL = process.env.SMARTSHELL_API_URL;
const CLUB_ID = parseInt(process.env.CLUB_ID, 10);


// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
let userStates = {};

const mainKeyboard = {
  reply_markup: {
    keyboard: [
      [{ text: "üí∞ –ë–∞–ª–∞–Ω—Å" }, { text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å" }],
      [{ text: "üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" }]
    ],
    resize_keyboard: true,
  },
};

// --- GraphQL –ó–∞–ø—Ä–æ—Å—ã (–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–¥–∞) ---
const LOGIN_MUTATION = `
mutation clientLogin($input: ClientLoginInput!) {
  clientLogin(input: $input) {
    access_token
  }
}`;

const MY_CLUB_QUERY = `
query myClub($id: Int!) {
  myClub(id: $id) {
    deposit
    user_bonus
  }
}`;

const CREATE_PAYMENT_MUTATION = `
mutation createPaymentTransaction($input: PaymentTransactionInput!) {
  createPaymentTransaction(input: $input) {
    additional {
      data
    }
  }
}`;

async function callSmartshellAPI(query, variables, accessToken = null) {
  const headers = {};
  if (accessToken) {
    headers['Authorization'] = `Bearer ${accessToken}`;
  }
  try {
    const response = await axios.post(SMARTSHELL_API_URL, {
      query,
      variables,
    }, { headers });

    if (response.data.errors) {
      console.error('GraphQL Error:', response.data.errors);
      throw new Error(response.data.errors[0].message);
    }
    return response.data.data;
  } catch (error) {
    console.error('API Call Failed:', error.message);
    throw error;
  }
}



bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(
    chatId,
    `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∫–ª—É–±–∞!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.`,
    mainKeyboard
  );
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text.startsWith('/')) return;

  const state = userStates[chatId];
  if (state) {
    if (state.step === 'awaiting_login') {
      state.login = text;
      state.step = 'awaiting_password';
      bot.sendMessage(chatId, "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ Smartshell.");
    } else if (state.step === 'awaiting_password') {
      const { login } = state;
      const password = text;
      delete userStates[chatId];

      bot.sendMessage(chatId, "–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...");

      try {
        const data = await callSmartshellAPI(LOGIN_MUTATION, { input: { login, password } });
        const accessToken = data.clientLogin.access_token;

        await User.findOneAndUpdate(
          { telegramId: chatId },
          {
            telegramId: chatId,
            firstName: msg.from.first_name,
            smartshellLogin: login,
            accessToken: accessToken,
            clubId: CLUB_ID,
          },
          { upsert: true, new: true }
        );

        bot.sendMessage(chatId, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", mainKeyboard);
      } catch (error) {
        bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", mainKeyboard);
      }
    } else if (state.step === 'awaiting_amount') {
      const amount = parseInt(text, 10);
      delete userStates[chatId];

      if (isNaN(amount) || amount <= 0) {
        bot.sendMessage(chatId, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", mainKeyboard);
        return;
      }

      try {
        const user = await User.findOne({ telegramId: chatId });
        if (!user || !user.accessToken) {
          bot.sendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ 'üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'.", mainKeyboard);
          return;
        }

        bot.sendMessage(chatId, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É...");

        const variables = {
          input: {
            company_id: user.clubId,
            service: "SBP",
            amount: amount,
            return_format: "LINK",
            success_url: "https://t.me/" + (await bot.getMe()).username,
            fail_url: "https://t.me/" + (await bot.getMe()).username,
          }
        };

        const data = await callSmartshellAPI(CREATE_PAYMENT_MUTATION, variables, user.accessToken);
        const paymentLink = data.createPaymentTransaction.additional.data;

        bot.sendMessage(chatId, "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", {
          reply_markup: {
            inline_keyboard: [
              [{ text: `–û–ø–ª–∞—Ç–∏—Ç—å ${amount} —Ä—É–±.`, url: paymentLink }]
            ]
          }
        });

      } catch (error) {
        bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.", mainKeyboard);
      }
    }
    return;
  }

  switch (text) {
    case 'üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è':
      userStates[chatId] = { step: 'awaiting_login' };
      bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ Smartshell.");
      break;

    case 'üí∞ –ë–∞–ª–∞–Ω—Å':
      try {
        const user = await User.findOne({ telegramId: chatId });
        if (!user || !user.accessToken) {
          bot.sendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ 'üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'.");
          return;
        }

        bot.sendMessage(chatId, "–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ...");
        const data = await callSmartshellAPI(MY_CLUB_QUERY, { id: user.clubId }, user.accessToken);
        const { deposit, user_bonus } = data.myClub;

        bot.sendMessage(chatId, `‚ÑπÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å:\n\n‚ñ´Ô∏è –î–µ–ø–æ–∑–∏—Ç: ${deposit} —Ä—É–±.\n‚ñ´Ô∏è –ë–æ–Ω—É—Å—ã: ${user_bonus} —Ä—É–±.`);

      } catch (error) {
        bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.");
      }
      break;

    case 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å':
      const user = await User.findOne({ telegramId: chatId });
      if (!user) {
        bot.sendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ 'üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'.");
        return;
      }
      userStates[chatId] = { step: 'awaiting_amount' };
      bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100):");
      break;
  }
});


await connectDB();

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
});