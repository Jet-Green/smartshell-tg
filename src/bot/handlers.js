import User from '../models/user.model.js';
import * as keyboards from './keyboards.js';
import * as smartshell from '../api/smartshell.service.js';
import * as subscription from '../services/subscription.service.js';
import config from '../config/index.js';

// –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
const userStates = {};

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–æ—Ç–∞.
 * @param {TelegramBot} bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
export function registerHandlers(bot) {

  bot.onText(/\/start/, async (msg) => {
    const { id: chatId } = msg.chat;
    delete userStates[chatId]; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    if (!(await subscription.isUserSubscribed(bot, msg.from.id))) {
      subscription.sendSubscriptionMessage(bot, chatId);
      return;
    }
    bot.sendMessage(chatId, `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!`, keyboards.mainMenuKeyboard);
  });

  bot.on('callback_query', async (callbackQuery) => {
    const { data, message } = callbackQuery;
    const { id: chatId } = message.chat;

    if (data === 'check_subscription') {
      await bot.answerCallbackQuery(callbackQuery.id);
      if (await subscription.isUserSubscribed(bot, callbackQuery.from.id)) {
        await bot.deleteMessage(chatId, message.message_id);
        await bot.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.", keyboards.mainMenuKeyboard);
      } else {
        await bot.sendMessage(chatId, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      }
    }
  });

  bot.on('message', async (msg) => {
    if (!msg.text || msg.text.startsWith('/')) return;

    const { id: chatId } = msg.chat;
    const { text } = msg;

    // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if (text === '–û—Ç–º–µ–Ω–∞') {
      delete userStates[chatId];
      bot.sendMessage(chatId, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", keyboards.mainMenuKeyboard);
      return;
    }

    // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ (–≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö)
    const currentState = userStates[chatId];
    if (currentState) {
      await handleStatefulMessage(bot, msg, currentState);
      return;
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥
    if (!(await subscription.isUserSubscribed(bot, msg.from.id))) {
      subscription.sendSubscriptionMessage(bot, chatId);
      return;
    }

    // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await handleMenuCommand(bot, msg);
  });
}

async function handleStatefulMessage(bot, msg, state) {
  const { id: chatId } = msg.chat;
  const { text } = msg;

  if (state.step === 'awaiting_login') {
    state.login = text;
    state.step = 'awaiting_password';
    bot.sendMessage(chatId, "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å.", keyboards.cancelKeyboard);
  } else if (state.step === 'awaiting_password') {
    const { login } = state;
    delete userStates[chatId];

    await bot.sendMessage(chatId, "–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ...", keyboards.removeKeyboard);
    try {
      const { access_token, refresh_token } = await smartshell.login(login, text);
      await User.findOneAndUpdate({ telegramId: chatId }, {
        telegramId: chatId,
        firstName: msg.from.first_name,
        smartshellLogin: login,
        accessToken: access_token,
        refreshToken: refresh_token,
        clubId: config.clubId,
      }, { upsert: true, new: true });
      await bot.sendMessage(chatId, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", keyboards.mainMenuKeyboard);
    } catch (error) {
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`, keyboards.mainMenuKeyboard);
    }
  } else if (state.step === 'awaiting_amount') {
    const amount = parseInt(text, 10);
    delete userStates[chatId]; // –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    if (isNaN(amount) || amount <= 0) {
      bot.sendMessage(chatId, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", keyboards.mainMenuKeyboard);
      return;
    }

    await bot.sendMessage(chatId, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É...", keyboards.removeKeyboard);
    await bot.sendChatAction(chatId, 'typing');

    try {
      const botUsername = (await bot.getMe()).username;
      const paymentLink = await smartshell.createPayment(chatId, amount, botUsername);

      await bot.sendMessage(chatId, "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", {
        reply_markup: {
          inline_keyboard: [[{ text: `–û–ø–ª–∞—Ç–∏—Ç—å ${amount} —Ä—É–±.`, url: paymentLink }]]
        }
      });
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      await bot.sendMessage(chatId, "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.", keyboards.mainMenuKeyboard);

    } catch (error) {
      await bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. ${error.message}`, keyboards.mainMenuKeyboard);
    }
  }
}

async function handleMenuCommand(bot, msg) {
  const { id: chatId } = msg.chat;
  const { text } = msg;

  switch (text) {
    case 'üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è':
      userStates[chatId] = { step: 'awaiting_login' };
      bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –æ—Ç Smartshell (—Ç–µ–ª–µ—Ñ–æ–Ω).", keyboards.cancelKeyboard);
      break;

    case 'üí∞ –ë–∞–ª–∞–Ω—Å':
      await bot.sendChatAction(chatId, 'typing');
      try {
        const { deposit, user_bonus } = await smartshell.getBalance(chatId);
        bot.sendMessage(chatId, `‚ÑπÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å:\n\n‚ñ´Ô∏è –î–µ–ø–æ–∑–∏—Ç: ${deposit} —Ä—É–±.\n‚ñ´Ô∏è –ë–æ–Ω—É—Å—ã: ${user_bonus} —Ä—É–±.`);
      } catch (error) {
        bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å. ${error.message}`, keyboards.mainMenuKeyboard);
      }
      break;
    case 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å':
      const user = await User.findOne({ telegramId: chatId });
      if (!user) {
        bot.sendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ 'üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'.", keyboards.mainMenuKeyboard);
        return;
      }
      userStates[chatId] = { step: 'awaiting_amount' };
      bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100):", keyboards.cancelKeyboard);
      break;
  }
}